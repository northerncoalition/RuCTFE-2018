#!/usr/bin/env python2

from pwn import *
import requests
import json
import re
import time

# X-Team-Token for flag submission
X_TEAM_TOKEN = ""

# Submission server URL
SUBMISSION_URL = "http://monitor.ructfe.org/flags"
SUBMISSION_URL = "http://127.0.0.1:1337/flags"

# Message types
NO_SUCH_FLAG        = "Denied: no such flag"
OWN_FLAG            = "Denied: flag is your own"
ALREADY_SUBMITTED   = "Denied: you already submitted this flag"
ACCEPTED            = "\[.+\] Accepted. (.+) flag points"

# Delays and timeouts
REQUEST_TIMEOUT     = 5 # HTTP Request timeouts (in seconds)
RECONNECT_DELAY     = 3 # Delay before attempting a new connection

def is_valid_flag(flag):
    """
    Checks if a string matches the flag format
    Returns the regex match or None
    """
    return re.match("^\w{31}=", flag)

def remove_invalid_flags(flags):
    """
    Takes a list of flags and removes flags with an invalid format
    Returns a list of valid flags (format-wise)
    """

    filtered_flags = [flag for flag in flags if is_valid_flag(flag)]
    log.info("Removed {} flags with incorrect format.".format(len(filtered_flags) - len(flags)))

    return filtered_flags

def print_statistics_from_flag_responses(flag_responses):

    # Statistics
    number_of_invalid_flags = 0
    number_of_own_flags = 0
    number_of_already_submitted_flags = 0
    number_of_accepted_flags = 0
    total_points = 0

    for response in flag_responses:

        if response['message_type'] == NO_SUCH_FLAG:
            number_of_invalid_flags += 1

        elif response['message_type'] == OWN_FLAG:
            number_of_own_flags += 1

        elif response['message_type'] == ALREADY_SUBMITTED:
            number_of_already_submitted_flags += 1

        elif response['message_type'] == ACCEPTED:
            number_of_accepted_flags += 1
            total_points += response['points']

        else:
            log.warning("Invalid message received : '{}'".format(response['message_type']))

    log.info("==== ROUND STATISTICS ===")
    log.info("Number of invalid flags submitted     : {}".format(number_of_invalid_flags))
    log.info("Number of our own flags submitted     : {}".format(number_of_own_flags))
    log.info("Number of already submitted flags     : {}".format(number_of_already_submitted_flags))
    log.info("Number of number of accepted flags    : {}".format(number_of_accepted_flags))
    log.info("Number of points gained               : {}".format(total_points))

def parse_response(flag_response):
    """
    Parses each individual flag response returned from submit_flags()
    Returns a dictionary containing { flag, is_valid, message_type, points }
    """

    flag            = flag_response['flag']
    is_valid        = flag_response['status']
    message_type    = flag_response['msg']
    points   = 0

    if NO_SUCH_FLAG in flag_response['msg']:
        message_type = NO_SUCH_FLAG

    if OWN_FLAG in flag_response['msg']:
        message_type = OWN_FLAG

    if ALREADY_SUBMITTED in flag_response['msg']:
        message_type = ALREADY_SUBMITTED

    if re.match(ACCEPTED, flag_response['msg']):
        message_type = ACCEPTED
        match = re.match(ACCEPTED, flag_response['msg'])
        points = float(match.groups(0)[0])

    return {
        "flag" : flag,
        "is_valid" : is_valid,
        "message_type" : message_type,
        "points" : points
    }

def submit_flags(flags = []):
    """
    Submit flags to the submission server and parses the responses.
    Returns the parsed flag responses.
    """

    log.success("Submitting {} flags.".format(len(flags)))

    headers = { "X-Team-Token" : X_TEAM_TOKEN }
    response = None

    # Loop until we receive a response from the submission server
    while not response:
        try:
            response = requests.put(SUBMISSION_URL, headers=headers,
                                        json=flags, timeout=REQUEST_TIMEOUT)

        except requests.ConnectionError as e:
            log.warning("Submission server is not up. Re-trying in {} seconds".format(
                RECONNECT_DELAY))
            time.sleep(RECONNECT_DELAY)

        except requests.ReadTimeout as e:
            log.warning("Submission server did not respond in {} seconds. Re-trying.".format(
                REQUEST_TIMEOUT))

    json_response = json.loads(response.text)
    flag_responses = [parse_response(response) for response in json_response]

    return flag_responses

if __name__ == '__main__':

    log.info("Starting exploit throwing framework.")

    # Flags received from various exploits
    flags = [
        "PNFP4DKBOV6BTYL9YFGBQ9006582ADC=",
        "STH5LK9R9OMGXOV4E06YZD71F746F53=",
        "0I7DUCYPX8UB2HP6D6UGN86BA26F2FE=",
        "PTK3DAGZ6XU4LPETXJTN7CE30EC0B54=",
    ]

    log.info("Found {} flags.".format(len(flags)))

    # Filter out flags with incorrect format
    filtered_flags = remove_invalid_flags(flags)

    # Send flags to submission server
    flag_responses = submit_flags(filtered_flags)

    # Print statistics
    print_statistics_from_flag_responses(flag_responses)
